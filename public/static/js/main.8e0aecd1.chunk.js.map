{"version":3,"sources":["provinceform.js","provinceupdate.js","Dprovince.js","tc_provinces.js","App.js","serviceWorker.js","index.js"],"names":["ProvinceForm","state","il","plak","visited","handleChange","target","key","name","setState","value","console","log","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","props","refresh","onSubmit","this","type","placeholder","onChange","React","Component","ProvinceUpdate","province","process","_id","onClick","Dprovince","deleteProvince","updateProvince","Province","getProvince","response","json","data","isCreate","id","renderForm","result","displayProvince","map","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e0aecd1.chunk.js","sourcesContent":["import React from 'react';\n\nclass ProvinceForm extends React.Component {\n    state = {\n        il: \"\",\n        plak: \"\",\n        visited: \"\"\n    }\n    handleChange = ( {target} ) => {\n        const key = target.name; // should I change this to 'il'?\n        this.setState({ [key] : target.value }, () => console.log(this.state[key]));\n    }\n\n    \n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        \n        const visited= this.state.visited === \"true\";\n        \n\n        fetch(('http://localhost:5500/api/tc_provinces/'), {\n        //fetch(`${process.env.REACT_APP_API_URL}/api/tc_provinces`, {\n            method: \"POST\",\n            headers:{\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify([{il : this.state.il, plak : this.state.plak, visited : visited}])\n        })\n        .then(this.props.refresh)\n        .then(() => this.setState({\n            il: \"\",\n            plak: 0,\n            visited: \"\"\n        }));\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.handleSubmit}> \n                <input \n                    name=\"il\" \n                    type=\"text\"\n                    value={this.state.il}\n                    placeholder= \"Name of Province\"\n                    onChange={this.handleChange}/>\n                <input\n                    name=\"plak\"\n                    type=\"number\"\n                    value={this.state.plak}\n                    placeholder= \"Plaka No.\"\n                    onChange={this.handleChange}/>\n                <select\n                    name=\"visited\"\n                    //type=\"boolean\"\n                    value={this.state.visited}\n                    onChange={this.handleChange}>\n                    <option value={true}>Visited</option>\n                    <option value={false}>Not Visited</option>\n                    \n                </select>\n\n                <input type=\"submit\" value=\"Add a Province\"/>\n            </form>\n        )\n    }\n}\n\n\nexport default ProvinceForm; ","import React from 'react';\n\nclass ProvinceUpdate extends React.Component {\n    state = {\n        il: this.props.province.il, //(?)\n        plak: this.props.province.plak,\n        visited: this.props.province.visited//BOOLEAN?\n    }\n  \n    handleChange = ( {target} ) => {\n        const key = target.name; // should I change this to 'il'? or name?\n        this.setState({ [key] : target.value }, () => console.log(this.state[key]));\n    }\n\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const visited= this.state.visited === \"true\";\n        //fetch(('http://localhost:5500/api/tc_provinces/'), {\n        fetch(`${process.env.REACT_APP_API_URL}/api/tc_provinces/${this.props.province._id}`, {\n            method: 'PUT',\n            headers:{\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify({il : this.state.il, plak : this.state.plak, visited : visited})\n        })\n        .then(this.props.refresh)\n        .then(() => this.setState({\n            il: \"\",\n            plak: 0,\n            visited: \"\"\n        }));\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.handleSubmit}> \n                <input \n                    name=\"il\" \n                    type=\"text\"\n                    value={this.state.il}\n                    placeholder= \"Name of Province\"\n                    onChange={this.handleChange}/>\n                <input\n                    name=\"plak\"\n                    type=\"number\"\n                    value={this.state.plak}\n                    placeholder= \"Plaka No.\"\n                    onChange={this.handleChange}/>\n                <select\n                    name=\"visited\"\n                    //type=\"boolean\"\n                    value={this.state.visited}\n                    onChange={this.handleChange}>\n                    <option value={true}>Visited</option>\n                    <option value={false}>Not Visited</option>\n                    \n                </select>\n\n                <input type=\"submit\" value=\"Edit or Update a Province\"/>\n                <input type=\"button\" value=\"Cancel\" onClick={this.props.refresh}/>\n            </form>\n        )\n    }\n}\n\n\nexport default ProvinceUpdate; ","import React from 'react';\n\nconst Dprovince = ({province, deleteProvince, updateProvince}) => {\n    return(\n        <>\n        <button onClick={() => deleteProvince(province._id)}>Delete</button>\n        <button onClick={() => updateProvince(province)}>Edit</button>\n        </>\n    )\n}\n\nexport default Dprovince;","import React, { Component } from 'react';\nimport ProvinceForm from './provinceform';\nimport ProvinceUpdate from './provinceupdate';\nimport Dprovince from './Dprovince';\n\n//TODO: Get Update to Function Properly\n//Clear field\n//Get \"Cancel\" button to work\n//Don't let \"Not yet visited\" be default anymore\n\nclass Province extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            province : [\n              \n            ],\n            isCreate : true,\n            updateProvince: {}//? updateRelative: {} in the tutorial\n        }\n    }\n\n    getProvince = () => {\n            fetch(`${process.env.REACT_APP_API_URL}/api/tc_provinces/`) //accesses API/database\n            .then(response => response.json())\n            .then(data => this.setState( {province : data, isCreate: true } ));//further instructions about what to do with it\n        \n    };\n\n    deleteProvince = (id) => {\n            fetch(`${process.env.REACT_APP_API_URL}/api/tc_provinces/${id}`, {\n                method: 'DELETE'\n            }) \n            .then(response => response.json())\n            .then(console.log)\n            .then(this.getProvince);\n    };\n\n    // updateProvince = (id) => {\n    //         fetch(`http://localhost:5500/api/tc_provinces/${id}`, {\n    //             method: 'PUT'\n    //         }) \n    //         .then(response => response.json())\n    //         .then(console.log)\n    //         .then(this.getProvince);\n    // };\n\n    updateProvince = (province) => {\n        this.setState({\n            updateProvince: province,\n            isCreate: false,\n        })\n    };\n\n    renderForm = () => {\n            let result;\n            if (this.state.isCreate){\n                result = (<ProvinceForm key=\"createForm\" refresh={this.getProvince} />);\n            } else {\n                const data = this.state.updateProvince; \n                result = <ProvinceUpdate key={data._id} province={data} refresh={this.getProvince}/>; // double check \"ProvinceUpdate\"\n            }\n            return result; \n    }\n\n    componentDidMount (){ //not sure, better ask\n            this.getProvince();\n    }\n\n    render(){ //had to add three parameters and make sure keys were as I had entered them\n        const displayProvince = this.state.province.map((province) => {\n        return <div> \n                    {province.il}, {province.plak}, {province.visited? 'visited': 'not yet visited'}\n                    <Dprovince province={province} \n                    deleteProvince={this.deleteProvince}\n                    updateProvince={this.updateProvince}/>\n               </div>\n               // top div above was <div key={province._id}>\n      \n           \n            //         province={province} deleteProvince={this.deleteProvince}\n            \n             \n        })\n\n        console.log(this.state.province);\n\n        return( // appears on the browser\n            <>\n                <h2>Provinces</h2>\n                {this.renderForm()}\n                {/* <ProvinceForm refresh={this.getProvince} -COPIED TO renderform- /> */  }\n                {displayProvince} \n            </>\n        )\n    }\n};\n\nexport default Province;","import React from 'react';\nimport Province from './tc_provinces';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Province/>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}